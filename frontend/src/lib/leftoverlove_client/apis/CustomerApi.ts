/* tslint:disable */
/* eslint-disable */
/**
 * LeftOverLove.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomerDto,
  CustomerDto,
} from '../models';
import {
    CreateCustomerDtoFromJSON,
    CreateCustomerDtoToJSON,
    CustomerDtoFromJSON,
    CustomerDtoToJSON,
} from '../models';

export interface CustomerAddPointsIdPostRequest {
    id: number;
    body?: number;
}

export interface CustomerByIdIdGetRequest {
    id: number;
}

export interface CustomerCreatePostRequest {
    createCustomerDto?: CreateCustomerDto;
}

export interface CustomerUpdatePointsIdPutRequest {
    id: number;
    body?: number;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     */
    async customerAddPointsIdPostRaw(requestParameters: CustomerAddPointsIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling customerAddPointsIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Customer/AddPoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDtoFromJSON(jsonValue));
    }

    /**
     */
    async customerAddPointsIdPost(requestParameters: CustomerAddPointsIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDto> {
        const response = await this.customerAddPointsIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Customer/All`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerDtoFromJSON));
    }

    /**
     */
    async customerAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerDto>> {
        const response = await this.customerAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async customerByIdIdGetRaw(requestParameters: CustomerByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling customerByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Customer/ById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDtoFromJSON(jsonValue));
    }

    /**
     */
    async customerByIdIdGet(requestParameters: CustomerByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDto> {
        const response = await this.customerByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerCreatePostRaw(requestParameters: CustomerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Customer/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerDtoToJSON(requestParameters['createCustomerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDtoFromJSON(jsonValue));
    }

    /**
     */
    async customerCreatePost(requestParameters: CustomerCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDto> {
        const response = await this.customerCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerUpdatePointsIdPutRaw(requestParameters: CustomerUpdatePointsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling customerUpdatePointsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Customer/UpdatePoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDtoFromJSON(jsonValue));
    }

    /**
     */
    async customerUpdatePointsIdPut(requestParameters: CustomerUpdatePointsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerDto> {
        const response = await this.customerUpdatePointsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
